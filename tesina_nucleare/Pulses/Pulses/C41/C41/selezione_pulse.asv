clc 
clear all 
close all 
%%
cartella = "C:\Users\costa\Documents\GitHub\PID-JET\tesina_nucleare\Pulses\Pulses\C41\C41"
files = dir(fullfile(cartella,'*.mat*'))
files = files(~[files.isdir]);
nomiFile = {files.name};
q = 1;
k = 1;

for i = 1: length(nomiFile)
     load(nomiFile{1,i})
    for j = 1:32
        fieldName = sprintf('S%dA', j);         
        flag = Error.(fieldName){1,1};          
        flag1 = Error.(fieldName){1,2};
        % Ora puoi controllare il flag come vuoi
        if flag == 0 && flag1 ==0 
            pulse_lan{k} = nomiFile{1,i};
            k = k+1;
            break;
        end
    end

end 


%% Calcolo Lan_Ne e Lan_TE
% Allunga o riduce i segnali per adattarli a Data.t
len = 14416;  % Lunghezza comune desiderata
 
% Interpolazione a lunghezza fissa = 14416
S15 = interp1(1:length(Data.S15A{1}), Data.S15A{1}, linspace(1,length(Data.S15A{1}),len), 'linear', 'extrap')';
S16 = interp1(1:length(Data.S16A{1}), Data.S16A{1}, linspace(1,length(Data.S16A{1}),len), 'linear', 'extrap')';
S19 = interp1(1:length(Data.S19A{1}), Data.S19A{1}, linspace(1,length(Data.S19A{1}),len), 'linear', 'extrap')';
S30 = interp1(1:length(Data.S30A{1}), Data.S30A{1}, linspace(1,length(Data.S30A{1}),len), 'linear', 'extrap')';
S31 = interp1(1:length(Data.S31A{1}), Data.S31A{1}, linspace(1,length(Data.S31A{1}),len), 'linear', 'extrap')';
 
% Calcolo media vettoriale (colonna)
Lan_TE = (S15 + S16 + S19 + S30 + S31) / 5;
 
% Tempo coerente
Data_t = linspace(min(Data.t), max(Data.t), len)';  % Ricampionato coerente
TS_t = TS.T.t(:);
 
%% Lan_TE
% Interpolazione dei secondi vettori (Temperatura elettronica)
T15 = interp1(1:length(Data.S15A{2}), Data.S15A{2}, linspace(1,length(Data.S15A{2}),len), 'linear', 'extrap')';
T16 = interp1(1:length(Data.S16A{2}), Data.S16A{2}, linspace(1,length(Data.S16A{2}),len), 'linear', 'extrap')';
T19 = interp1(1:length(Data.S19A{2}), Data.S19A{2}, linspace(1,length(Data.S19A{2}),len), 'linear', 'extrap')';
T30 = interp1(1:length(Data.S30A{2}), Data.S30A{2}, linspace(1,length(Data.S30A{2}),len), 'linear', 'extrap')';
T31 = interp1(1:length(Data.S31A{2}), Data.S31A{2}, linspace(1,length(Data.S31A{2}),len), 'linear', 'extrap')';
 
% Calcolo media temperatura elettronica
Lan_Ne = (T15 + T16 + T19 + T30 + T31) / 5;
Data_te = linspace(min(Data.t), max(Data.t), len)';  % Ricampionato coerente

%%
for i=1:length(pulse_lan)

    load(pulse_lan{i});
    

    figure(1)
    clf;
    ax1=subplot(2,4,1);
    plot(Data.t,Data.Ip,'LineWidth', 2)
    xlabel('Tempo [s]', 'FontSize', 13);
    title('Plasma current [A]', 'FontSize', 13)
    grid on;
    ax2=subplot(2,4,2);
    grid on;
    hold off
    plot(Data.t,Data.PTOT, 'LineWidth', 2)
    grid on;
    hold on
    plot(Data.t,Data.Prad, 'LineWidth', 2)
    legend(['P_in';'Prad'])
    xlabel('Tempo [s]', 'FontSize', 13);
    title('Power [W]','FontSize', 13)
    grid on;
    ax3=subplot(2,4,3);
    hold off
    plot(Data.t,Data.WDIA,'LineWidth', 2)
    grid on;
    hold on;
    plot(Data.t,Data.WP,'LineWidth', 2)
     xlabel('Tempo [s]', 'FontSize', 13);
     title('Plasma Energy [J]','FontSize', 13)
     grid on;
     ax4=subplot(2,4,4);
     grid on;
     try
        hold off
        plot(Data.t,Data.ZEFF,'LineWidth', 2)
        grid on;
        xlabel('Tempo [s]', 'FontSize', 13);
        title('ZEFF','FontSize', 13)
     catch
     end
    ax5=subplot(2,4,5);
    grid on;
    hold off
    plot(TS.T.t,TS.T.T(1,:),'LineWidth', 2);
    yyaxis right
    plot(TS.T.t,TS.T.T(56,:),'LineWidth', 2);     
    legend(["Core";"OMP"])
    xlabel('Tempo [s]', 'FontSize', 13);
    title('Temperature [eV]','FontSize', 13)
    grid on;
    ax6=subplot(2,4,6);
    grid on;
    hold off
    plot(TS.T.t,TS.N.T(1,:), 'LineWidth', 2); 
    hold on
    grid on;
    % fprintf("dimensioni Lan_Ne %d\ndimensioni tempo Lan_Ne %d\ndimensioni TS %d\n", size(Lan_Ne), size(Data.t), size(TS.T.t));
    plot(TS.T.t,interp1(Data_t,Lan_Ne,TS.T.t),'LineWidth', 2);
    grid on;
    plot(TS.T.t,TS.N.T(56,:),'LineWidth', 2);
    grid on;
    ylim([0 Inf])
    
    legend(["Core";"TAR";"OMP"])
    xlabel('Tempo [s]', 'FontSize', 13);
    title('Density [n_{e}/m^{3}]','FontSize', 13)
    ax7=subplot(2,4,7);
    grid on;
    hold off
    plot(Data.t,Data.D2,'LineWidth', 2);
    grid on;
    
    if Error.NE==0 || Error.N2==0
    yyaxis right
    
    try
        plot(Data.t,Data.N2,'LineWidth', 2);
        grid on;
    catch
    plot(Data.t,Data.NE,'LineWidth', 2);
    grid on;
    end
    end
    xlabel('Tempo [s]', 'FontSize', 13);
    title('Valves [n_{e}/m^{3}]','FontSize', 13)
    
    ax8=subplot(2,4,8);
    hold off
    plot(Data_t,Lan_TE,'LineWidth', 2);
    grid on;
    xlabel('Tempo [s]', 'FontSize', 13);
    title('T_{TAR} [eV]','FontSize', 13)
    
    sgtitle(num2str(shot))
    linkaxes([ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8],'x')
    drawnow;
    pause()

end
%%
for i =1:length(nomiFile)
    sparo = load(nomiFile{1,i});
    
    if (sparo.Error.NE == 0 || sparo.Error.N2 == 0)
        pulse_impurezze{q} = {nomiFile{1,i}};
        q = q+1;
    end

end 

%% DATI SPARI ANALIZZATI

impurezze_sparo_1(pulse_lan);
% dati_sparo_2(name_l);
% dati_sparo_3(name_l);

%% 1. Sparo 94568
load datimpurezze_sparo_1.mat
% clc
% ottimizza_PID(n_omp_data, n_core_data);
% ottimizza_temp_PID(temp_core_data, temp_omp_data, temp_tar_data, n_core_data, P_tot, Z_eff);

%% 2. Sparo 95502
load param_sparo_2.mat

%% 3. Sparo 95503
load param_sparo_3.mat

